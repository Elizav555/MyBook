@using System.Text
@model MyBook.Models.Admin.AdminViewModel
<section class="admin_functional">
    <h2>Получить информацию о книге</h2>
    <form class="form-inline">
        <input class="form-control mr-sm-2" type="search" placeholder="Найти книгу" aria-label="Search">
    </form>
    <div class="user_information">
        <div class="books_information">
            <table>
                <tr class="upper_table_row">
                    <td>Обложка</td>
                    <td>Название</td>
                    <td>Автор</td>
                    <td>Жанр</td>
                    <td>Действия</td>
                </tr>
                @foreach (var book in Model.Books.OrderByDescending(it => it.BookId).Take(10))
                {
                    var authors = new StringBuilder();
                    authors.AppendJoin(" , ", book.AuthorBooks.Select(it => it.Author.Name));
                    var genres = new StringBuilder();
                    genres.AppendJoin(" , ", book.BookGenres.Select(it => it.Genre.Name));
                    @*var rating = book.Ratings != null ? Math.Round(book.Ratings.Select(it => it.Points).Sum() / book.Ratings.Count, 2) : 0.0;
                        var isPaid = book.IsPaid ? "Да" : "Нет";
                        var isAdult = book.IsForAdult ? "Да" : "Нет";*@
                    string? imgLink = book.ImgLinks.FirstOrDefault()?.Url;
                    <tr>
                        <td><img src="@imgLink"></td>
                        <td>@book.Name</td>
                        <td>@authors.ToString()</td>
                        <td>@genres.ToString()</td>
                        <td>
                            <div class="flex_but">
                                @{
                                    var model = new MyBook.Models.Admin.EditBookViewModel
                {
                    BookId = book.BookId,
                    Name = book.Name,
                    Language = book.Language,
                    PublishedDate = book.PublishedDate,
                    IsForAdult = book.IsForAdult,
                    IsPaid = book.IsPaid,
                    GenreName = book.BookGenres.FirstOrDefault()?.Genre.Name,
                    AuthorName = book.AuthorBooks.FirstOrDefault()?.Author.Name,
                    PagesCount = book.Description?.PagesCount,
                    Price = book.Description?.Price,
                    Description = book.Description?.Description,
                    UrlEPUB = book.Description?.DownloadLinks?.FirstOrDefault(it => it.Format == "epub")?.Url,
                    UrlPDF = book.Description?.DownloadLinks?.FirstOrDefault(it => it.Format == "pdf")?.Url,
                    ImageLink = book.ImgLinks?.FirstOrDefault()?.Url,
                };
                                }
                                <button class="spec_but" type="button" onclick="location.href='@Url.Action("EditBookModal", "AdminProfile",model)'">
                                    Редактировать
                                </button>
                                <button class="spec_but" type="button" onclick="location.href='@Url.Action("DeleteBook", "AdminProfile",book)'">Удалить</button>
                            </div>
                        </td>
                    </tr>
                }
            </table>
        </div>
        <button class="spec_but" type="button" onclick="location.href='@Url.Action("AddBookModal", "AdminProfile")'">
            Добавить книгу
        </button>
    </div>
</section>

