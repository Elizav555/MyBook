// <auto-generated />
using System;
using BooksParcer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BooksParcer.Migrations
{
    [DbContext(typeof(MyBookContext))]
    partial class MyBookContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BooksParcer.Author", b =>
                {
                    b.Property<int>("AuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("author_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AuthorId"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("AuthorId"), null, null, 0L, null, null, null);

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AuthorId");

                    b.ToTable("author", (string)null);
                });

            modelBuilder.Entity("BooksParcer.AuthorBook", b =>
                {
                    b.Property<int>("AuthorBookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("author_book_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AuthorBookId"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("AuthorBookId"), null, null, 0L, null, null, null);

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.HasKey("AuthorBookId");

                    b.HasIndex(new[] { "AuthorId" }, "IX_author_book_AuthorId");

                    b.HasIndex(new[] { "BookId" }, "IX_author_book_BookId");

                    b.ToTable("author_book", (string)null);
                });

            modelBuilder.Entity("BooksParcer.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("book_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BookId"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("BookId"), null, null, 0L, null, null, null);

                    b.Property<int>("DescriptionId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsForAdult")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("boolean");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly?>("PublishedDate")
                        .HasColumnType("date");

                    b.Property<int>("RatingId")
                        .HasColumnType("integer");

                    b.HasKey("BookId");

                    b.HasIndex(new[] { "DescriptionId" }, "IX_book_DescriptionId")
                        .IsUnique();

                    b.HasIndex(new[] { "RatingId" }, "IX_book_RatingId")
                        .IsUnique();

                    b.ToTable("book", (string)null);
                });

            modelBuilder.Entity("BooksParcer.BookCenter", b =>
                {
                    b.Property<int>("BookCenterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("book_center_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BookCenterId"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("BookCenterId"), null, null, 0L, null, null, null);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("BookCenterId");

                    b.ToTable("book_center", (string)null);
                });

            modelBuilder.Entity("BooksParcer.BookDesc", b =>
                {
                    b.Property<int>("BookDescId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("book_desc_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BookDescId"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("BookDescId"), null, null, 0L, null, null, null);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("PagesCount")
                        .HasColumnType("integer");

                    b.Property<string>("Price")
                        .HasColumnType("text");

                    b.HasKey("BookDescId");

                    b.ToTable("book_desc", (string)null);
                });

            modelBuilder.Entity("BooksParcer.BookGenre", b =>
                {
                    b.Property<int>("BookGenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("book_genre_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BookGenreId"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("BookGenreId"), null, null, 0L, null, null, null);

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<int>("GenreId")
                        .HasColumnType("integer");

                    b.HasKey("BookGenreId");

                    b.HasIndex(new[] { "BookId" }, "IX_book_genre_BookId");

                    b.HasIndex(new[] { "GenreId" }, "IX_book_genre_GenreId");

                    b.ToTable("book_genre", (string)null);
                });

            modelBuilder.Entity("BooksParcer.DownloadLink", b =>
                {
                    b.Property<int>("DownloadLinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("download_link_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DownloadLinkId"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("DownloadLinkId"), null, null, 0L, null, null, null);

                    b.Property<int>("BookDescId")
                        .HasColumnType("integer");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("DownloadLinkId");

                    b.HasIndex(new[] { "BookDescId" }, "IX_download_link_BookDescId");

                    b.ToTable("download_link", (string)null);
                });

            modelBuilder.Entity("BooksParcer.FavAuthor", b =>
                {
                    b.Property<int>("FavAuthorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("fav_author_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FavAuthorId"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("FavAuthorId"), null, null, 0L, null, null, null);

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("FavAuthorId");

                    b.HasIndex(new[] { "AuthorId" }, "IX_fav_author_AuthorId");

                    b.HasIndex(new[] { "UserId" }, "IX_fav_author_UserId");

                    b.ToTable("fav_author", (string)null);
                });

            modelBuilder.Entity("BooksParcer.FavGenre", b =>
                {
                    b.Property<int>("FavGenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("fav_genre_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FavGenreId"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("FavGenreId"), null, null, 0L, null, null, null);

                    b.Property<int>("GenreId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("FavGenreId");

                    b.HasIndex(new[] { "GenreId" }, "IX_fav_genre_GenreId");

                    b.HasIndex(new[] { "UserId" }, "IX_fav_genre_UserId");

                    b.ToTable("fav_genre", (string)null);
                });

            modelBuilder.Entity("BooksParcer.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("genre_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GenreId"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("GenreId"), null, null, 0L, null, null, null);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("GenreId");

                    b.ToTable("genre", (string)null);
                });

            modelBuilder.Entity("BooksParcer.History", b =>
                {
                    b.Property<int>("HistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("history_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("HistoryId"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("HistoryId"), null, null, 0L, null, null, null);

                    b.Property<int>("BookId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("HistoryId");

                    b.HasIndex(new[] { "BookId" }, "IX_history_BookId");

                    b.HasIndex(new[] { "UserId" }, "IX_history_UserId");

                    b.ToTable("history", (string)null);
                });

            modelBuilder.Entity("BooksParcer.ImgLink", b =>
                {
                    b.Property<int>("ImgLinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("img_link_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ImgLinkId"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("ImgLinkId"), null, null, 0L, null, null, null);

                    b.Property<int?>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<int?>("BookId")
                        .HasColumnType("integer");

                    b.Property<string>("Resolution")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ImgLinkId");

                    b.HasIndex(new[] { "AuthorId" }, "IX_img_link_AuthorId");

                    b.HasIndex(new[] { "BookId" }, "IX_img_link_BookId");

                    b.ToTable("img_link", (string)null);
                });

            modelBuilder.Entity("BooksParcer.Rating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("rating_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RatingId"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("RatingId"), null, null, 0L, null, null, null);

                    b.Property<double>("Points")
                        .HasColumnType("double precision");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("RatingId");

                    b.HasIndex(new[] { "UserId" }, "IX_rating_UserId");

                    b.ToTable("rating", (string)null);
                });

            modelBuilder.Entity("BooksParcer.Subscription", b =>
                {
                    b.Property<int>("SubscrId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("subscr_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SubscrId"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("SubscrId"), null, null, 0L, null, null, null);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("SubscrId");

                    b.HasIndex(new[] { "TypeId" }, "IX_subscription_TypeId")
                        .IsUnique();

                    b.ToTable("subscription", (string)null);
                });

            modelBuilder.Entity("BooksParcer.SubscrType", b =>
                {
                    b.Property<int>("SubscrTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("subscr_type_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SubscrTypeId"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("SubscrTypeId"), null, null, 0L, null, null, null);

                    b.Property<int?>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<bool>("ForPaid")
                        .HasColumnType("boolean");

                    b.Property<int?>("GenreId")
                        .HasColumnType("integer");

                    b.HasKey("SubscrTypeId");

                    b.HasIndex(new[] { "AuthorId" }, "IX_subscr_type_AuthorId");

                    b.HasIndex(new[] { "GenreId" }, "IX_subscr_type_GenreId");

                    b.ToTable("subscr_type", (string)null);
                });

            modelBuilder.Entity("BooksParcer.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("UserId"), null, null, 0L, null, null, null);

                    b.Property<int>("InfoId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.HasIndex(new[] { "InfoId" }, "IX_user_InfoId")
                        .IsUnique();

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("BooksParcer.UserInfo", b =>
                {
                    b.Property<int>("UserInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_info_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserInfoId"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("UserInfoId"), null, null, 0L, null, null, null);

                    b.Property<DateOnly>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserInfoId");

                    b.ToTable("user_info", (string)null);
                });

            modelBuilder.Entity("BooksParcer.UserSubscr", b =>
                {
                    b.Property<int>("UserSubscrId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("user_subscr_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserSubscrId"));
                    NpgsqlPropertyBuilderExtensions.HasIdentityOptions(b.Property<int>("UserSubscrId"), null, null, 0L, null, null, null);

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("UserSubscrId");

                    b.HasIndex(new[] { "SubscriptionId" }, "IX_user_subscr_SubscriptionId")
                        .IsUnique();

                    b.HasIndex(new[] { "UserId" }, "IX_user_subscr_UserId");

                    b.ToTable("user_subscr", (string)null);
                });

            modelBuilder.Entity("BooksParcer.AuthorBook", b =>
                {
                    b.HasOne("BooksParcer.Author", "Author")
                        .WithMany("AuthorBooks")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BooksParcer.Book", "Book")
                        .WithMany("AuthorBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BooksParcer.Book", b =>
                {
                    b.HasOne("BooksParcer.BookDesc", "Description")
                        .WithOne("Book")
                        .HasForeignKey("BooksParcer.Book", "DescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BooksParcer.Rating", "Rating")
                        .WithOne("Book")
                        .HasForeignKey("BooksParcer.Book", "RatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Description");

                    b.Navigation("Rating");
                });

            modelBuilder.Entity("BooksParcer.BookGenre", b =>
                {
                    b.HasOne("BooksParcer.Book", "Book")
                        .WithMany("BookGenres")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BooksParcer.Genre", "Genre")
                        .WithMany("BookGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("BooksParcer.DownloadLink", b =>
                {
                    b.HasOne("BooksParcer.BookDesc", "BookDesc")
                        .WithMany("DownloadLinks")
                        .HasForeignKey("BookDescId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BookDesc");
                });

            modelBuilder.Entity("BooksParcer.FavAuthor", b =>
                {
                    b.HasOne("BooksParcer.Author", "Author")
                        .WithMany("FavAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BooksParcer.User", "User")
                        .WithMany("FavAuthors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BooksParcer.FavGenre", b =>
                {
                    b.HasOne("BooksParcer.Genre", "Genre")
                        .WithMany("FavGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BooksParcer.User", "User")
                        .WithMany("FavGenres")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BooksParcer.History", b =>
                {
                    b.HasOne("BooksParcer.Book", "Book")
                        .WithMany("Histories")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BooksParcer.User", "User")
                        .WithMany("Histories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BooksParcer.ImgLink", b =>
                {
                    b.HasOne("BooksParcer.Author", "Author")
                        .WithMany("ImgLinks")
                        .HasForeignKey("AuthorId");

                    b.HasOne("BooksParcer.Book", "Book")
                        .WithMany("ImgLinks")
                        .HasForeignKey("BookId");

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("BooksParcer.Rating", b =>
                {
                    b.HasOne("BooksParcer.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BooksParcer.Subscription", b =>
                {
                    b.HasOne("BooksParcer.SubscrType", "Type")
                        .WithOne("Subscription")
                        .HasForeignKey("BooksParcer.Subscription", "TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("BooksParcer.SubscrType", b =>
                {
                    b.HasOne("BooksParcer.Author", "Author")
                        .WithMany("SubscrTypes")
                        .HasForeignKey("AuthorId");

                    b.HasOne("BooksParcer.Genre", "Genre")
                        .WithMany("SubscrTypes")
                        .HasForeignKey("GenreId");

                    b.Navigation("Author");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("BooksParcer.User", b =>
                {
                    b.HasOne("BooksParcer.UserInfo", "Info")
                        .WithOne("User")
                        .HasForeignKey("BooksParcer.User", "InfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Info");
                });

            modelBuilder.Entity("BooksParcer.UserSubscr", b =>
                {
                    b.HasOne("BooksParcer.Subscription", "Subscription")
                        .WithOne("UserSubscr")
                        .HasForeignKey("BooksParcer.UserSubscr", "SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BooksParcer.User", "User")
                        .WithMany("UserSubscrs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscription");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BooksParcer.Author", b =>
                {
                    b.Navigation("AuthorBooks");

                    b.Navigation("FavAuthors");

                    b.Navigation("ImgLinks");

                    b.Navigation("SubscrTypes");
                });

            modelBuilder.Entity("BooksParcer.Book", b =>
                {
                    b.Navigation("AuthorBooks");

                    b.Navigation("BookGenres");

                    b.Navigation("Histories");

                    b.Navigation("ImgLinks");
                });

            modelBuilder.Entity("BooksParcer.BookDesc", b =>
                {
                    b.Navigation("Book")
                        .IsRequired();

                    b.Navigation("DownloadLinks");
                });

            modelBuilder.Entity("BooksParcer.Genre", b =>
                {
                    b.Navigation("BookGenres");

                    b.Navigation("FavGenres");

                    b.Navigation("SubscrTypes");
                });

            modelBuilder.Entity("BooksParcer.Rating", b =>
                {
                    b.Navigation("Book")
                        .IsRequired();
                });

            modelBuilder.Entity("BooksParcer.Subscription", b =>
                {
                    b.Navigation("UserSubscr")
                        .IsRequired();
                });

            modelBuilder.Entity("BooksParcer.SubscrType", b =>
                {
                    b.Navigation("Subscription")
                        .IsRequired();
                });

            modelBuilder.Entity("BooksParcer.User", b =>
                {
                    b.Navigation("FavAuthors");

                    b.Navigation("FavGenres");

                    b.Navigation("Histories");

                    b.Navigation("Ratings");

                    b.Navigation("UserSubscrs");
                });

            modelBuilder.Entity("BooksParcer.UserInfo", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
